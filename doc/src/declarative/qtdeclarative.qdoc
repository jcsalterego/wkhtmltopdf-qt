/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
  \module QtDeclarative
  \title QtDeclarative Module
  \ingroup modules

  \brief The Qt Declarative module provides a declarative framework
  for building highly dynamic, custom user interfaces.

  To include the definitions of the module's classes, use the
  following directive:

  \code
  #include <QtDeclarative>
  \endcode

  To link against the module, add this line to your \l qmake \c
  .pro file:

  \code
  QT += declarative
  \endcode

  For more information on the Qt Declarative module, see the
  \l{declarativeui.html}{Declarative UI} documentation.
*/


/*!
  \macro QML_DECLARE_TYPE()
  \relates QDeclarativeEngine

  Equivalent to  Q_DECLARE_METATYPE(TYPE) and Q_DECLARE_METATYPE(QDeclarativeListProperty<TYPE>)
*/


/*!
  \fn int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const char *qmlName)
  \relates QDeclarativeEngine

  This template function registers the C++ type in the QML system with
  the name \a qmlName, in the library imported from \a uri having the
  version number composed from \a versionMajor and \a versionMinor.

  Returns the QML type id.

  Example: Register the C++ class \c MinehuntGame as the QML type
  named \c Game for version 0.1 in the import library \c MinehuntCore:

  \code
  qmlRegisterType<MinehuntGame>("MinehuntCore", 0, 1, "Game");
  \endcode

  Note that it's perfectly reasonable for a library to register types to older versions
  than the actual version of the library. Indeed, it is normal for the new library to allow
  QML written to previous versions to continue to work, even if more advanced versions of
  some of its types are available.
*/

/*!
  \fn int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMinor, const char *qmlName, const QString& message)
  \relates QDeclarativeEngine

  This template function registers the C++ type in the QML system with
  the name \a qmlName, in the library imported from \a uri having the
  version number composed from \a versionMajor and \a versionMinor.

  While the type has a name and a type, it cannot be created, and the
  given error \a message will result if creation is attempted.

  This is useful where the type is only intended for providing attached properties or enum values.

  Returns the QML type id.

  \sa qmlRegisterTypeNotAvailable
*/

/*!
  \fn int qmlRegisterTypeNotAvailable(const char *uri, int versionMajor, int versionMinor, const char *qmlName, const QString& message)
  \relates QDeclarativeEngine

  This function registers a type in the QML system with the name \a qmlName, in the library imported from \a uri having the
  version number composed from \a versionMajor and \a versionMinor, but any attempt to instantiate the type
  will produce the given error \a message.

  Normally, the types exported by a module should be fixed. However, if a C++ type is not available, you should
  at least "reserve" the QML type name, and give the user of your module a meaningful error message.

  Returns the QML type id.

  Example:

  \code
  #ifdef NO_GAMES_ALLOWED
  qmlRegisterTypeNotAvailable("MinehuntCore", 0, 1, "Game", "Get back to work, slacker!");
  #else
  qmlRegisterType<MinehuntGame>("MinehuntCore", 0, 1, "Game");
  #endif
  \endcode

  This will cause any QML which uses this module and attempts to use the type to produce an error message:
  \code
fun.qml: Get back to work, slacker!
     Game {
     ^
  \endcode

  Without this, a generic "Game is not a type" message would be given.

  \sa qmlRegisterUncreatableType
*/

/*!
  \fn int qmlRegisterType()
  \relates QDeclarativeEngine
  \overload

  This template function registers the C++ type in the QML
  system. Instances of this type cannot be created from the QML
  system.

  Returns the QML type id.
*/

/*!
  \fn int qmlRegisterInterface(const char *typeName)
  \relates QDeclarativeEngine

  This template function registers the C++ type in the QML system
  under the name \a typeName.


  Returns the QML type id.
  */
